{
  "address": "0x35bE9cd4BF4E27158605c3A49688D913671ce41a",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "senderBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "recipientBalance",
          "type": "uint256"
        }
      ],
      "name": "CancelStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "stopTime",
          "type": "uint256"
        }
      ],
      "name": "CreateStream",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromStream",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "cancelStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stopTime",
          "type": "uint256"
        }
      ],
      "name": "createStream",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "deltaOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        }
      ],
      "name": "getStream",
      "outputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stopTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainingBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ratePerSecond",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextStreamId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "streamId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromStream",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8e4d4d4188399d907707cfd5d95b354cf2a4b5cc308446583db47e701c4d308e",
  "receipt": {
    "to": null,
    "from": "0xB36e76724DfA0D0ef41F2F428a4EC1b07492e559",
    "contractAddress": "0x35bE9cd4BF4E27158605c3A49688D913671ce41a",
    "transactionIndex": 4,
    "gasUsed": "1494911",
    "logsBloom": "0x
    "blockHash": "0xb15b3a12a9b789469976760f8bd885265042b10a867673a254d1364b6244d66b",
    "transactionHash": "0x8e4d4d4188399d907707cfd5d95b354cf2a4b5cc308446583db47e701c4d308e",
    "logs": [],
    "blockNumber": 1840525,
    "cumulativeGasUsed": "2401068",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "33b29ea45bc62a5a5881ee4ea2876aef",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"senderBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"recipientBalance\",\"type\":\"uint256\"}],\"name\":\"CancelStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"CreateStream\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromStream\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"cancelStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"}],\"name\":\"createStream\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"deltaOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"}],\"name\":\"getStream\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stopTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ratePerSecond\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextStreamId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"streamId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromStream\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Sablier\",\"kind\":\"dev\",\"methods\":{\"cancelStream(uint256)\":{\"details\":\"Throws if the id does not point to a valid stream.  Throws if the caller is not the sender or the recipient of the stream.  Throws if there is a token transfer failure.\",\"params\":{\"streamId\":\"The id of the stream to cancel.\"},\"returns\":{\"_0\":\"bool true=success, otherwise false.\"}},\"createStream(address,uint256,address,uint256,uint256)\":{\"details\":\"Throws if the recipient is the zero address, the contract itself or the caller.  Throws if the deposit is 0.  Throws if the start time is before `block.timestamp`.  Throws if the stop time is before the start time.  Throws if the duration calculation has a math error.  Throws if the deposit is smaller than the duration.  Throws if the deposit is not a multiple of the duration.  Throws if the rate calculation has a math error.  Throws if the next stream id calculation has a math error.  Throws if the contract is not allowed to transfer enough tokens.  Throws if there is a token transfer failure.\",\"params\":{\"deposit\":\"The amount of money to be streamed.\",\"recipient\":\"The address towards which the money is streamed.\",\"startTime\":\"The unix timestamp for when the stream starts.\",\"stopTime\":\"The unix timestamp for when the stream stops.\",\"tokenAddress\":\"The ERC20 token to use as streaming currency.\"},\"returns\":{\"_0\":\"The uint256 id of the newly created stream.\"}},\"withdrawFromStream(uint256,uint256)\":{\"details\":\"Throws if the id does not point to a valid stream.  Throws if the caller is not the sender or the recipient of the stream.  Throws if the amount exceeds the available balance.  Throws if there is a token transfer failure.\",\"params\":{\"amount\":\"The amount of tokens to withdraw.\",\"streamId\":\"The id of the stream to withdraw tokens from.\"}}},\"title\":\"Sablier\",\"version\":1},\"userdoc\":{\"events\":{\"CancelStream(uint256,address,address,uint256,uint256)\":{\"notice\":\"Emits when a stream is successfully cancelled and tokens are transferred back on a pro rata basis.\"},\"CreateStream(uint256,address,address,uint256,address,uint256,uint256)\":{\"notice\":\"Emits when a stream is successfully created.\"},\"WithdrawFromStream(uint256,address,uint256)\":{\"notice\":\"Emits when the recipient of a stream withdraws a portion or all their pro rata share of the stream.\"}},\"kind\":\"user\",\"methods\":{\"cancelStream(uint256)\":{\"notice\":\"Cancels the stream and transfers the tokens back on a pro rata basis.\"},\"createStream(address,uint256,address,uint256,uint256)\":{\"notice\":\"Creates a new stream funded by `msg.sender` and paid towards `recipient`.\"},\"nextStreamId()\":{\"notice\":\"Counter for new stream ids.\"},\"withdrawFromStream(uint256,uint256)\":{\"notice\":\"Withdraws from the contract to the recipient's account.\"}},\"notice\":\"Money streaming.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Sablier/Sablier.sol\":\"Sablier\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/Sablier/Sablier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./shared-contracts/compound/CarefulMath.sol\\\";\\n\\nimport \\\"./interfaces/ISablier.sol\\\";\\nimport \\\"./Types.sol\\\";\\n\\n/**\\n * @title Sablier\\n * @author Sablier\\n * @notice Money streaming.\\n */\\ncontract Sablier is ISablier, ReentrancyGuard, CarefulMath {\\n    using SafeERC20 for IERC20;\\n\\n    /*** Storage Properties ***/\\n\\n    /**\\n     * @notice Counter for new stream ids.\\n     */\\n    uint256 public nextStreamId;\\n\\n    // /**\\n    //  * @notice The stream objects identifiable by their unsigned integer ids.\\n    //  */\\n    mapping(uint256 => Types.Stream) private streams;\\n\\n    /*** Modifiers ***/\\n\\n    /**\\n     * @dev Throws if the caller is not the sender of the recipient of the stream.\\n     */\\n    modifier onlySenderOrRecipient(uint256 streamId) {\\n        require(\\n            msg.sender == streams[streamId].sender || msg.sender == streams[streamId].recipient,\\n            \\\"caller is not the sender or the recipient of the stream\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if the provided id does not point to a valid stream.\\n     */\\n    modifier streamExists(uint256 streamId) {\\n        require(streams[streamId].isEntity, \\\"stream does not exist\\\");\\n        _;\\n    }\\n\\n    /*** Contract Logic Starts Here */\\n\\n    constructor() public {\\n        nextStreamId = 100000;\\n    }\\n\\n    /*** View Functions ***/\\n\\n    // /**\\n    //  * @notice Returns the stream with all its properties.\\n    //  * @dev Throws if the id does not point to a valid stream.\\n    //  * @param streamId The id of the stream to query.\\n    //  * @return The stream object.\\n    //  */\\n    function getStream(uint256 streamId)\\n        external\\n        override\\n        view\\n        streamExists(streamId)\\n        returns (\\n            address sender,\\n            address recipient,\\n            uint256 deposit,\\n            address tokenAddress,\\n            uint256 startTime,\\n            uint256 stopTime,\\n            uint256 remainingBalance,\\n            uint256 ratePerSecond\\n        )\\n    {\\n        sender = streams[streamId].sender;\\n        recipient = streams[streamId].recipient;\\n        deposit = streams[streamId].deposit;\\n        tokenAddress = streams[streamId].tokenAddress;\\n        startTime = streams[streamId].startTime;\\n        stopTime = streams[streamId].stopTime;\\n        remainingBalance = streams[streamId].remainingBalance;\\n        ratePerSecond = streams[streamId].ratePerSecond;\\n    }\\n\\n    // /**\\n    //  * @notice Returns either the delta in seconds between `block.timestamp` and `startTime` or\\n    //  *  between `stopTime` and `startTime, whichever is smaller. If `block.timestamp` is before\\n    //  *  `startTime`, it returns 0.\\n    //  * @dev Throws if the id does not point to a valid stream.\\n    //  * @param streamId The id of the stream for which to query the delta.\\n    //  * @return The time delta in seconds.\\n    //  */\\n    function deltaOf(uint256 streamId) public view streamExists(streamId) returns (uint256 delta) {\\n        Types.Stream memory stream = streams[streamId];\\n        if (block.timestamp <= stream.startTime) return 0;\\n        if (block.timestamp < stream.stopTime) return block.timestamp - stream.startTime;\\n        return stream.stopTime - stream.startTime;\\n    }\\n\\n    struct BalanceOfLocalVars {\\n        MathError mathErr;\\n        uint256 recipientBalance;\\n        uint256 withdrawalAmount;\\n        uint256 senderBalance;\\n    }\\n\\n    // /**\\n    //  * @notice Returns the available funds for the given stream id and address.\\n    //  * @dev Throws if the id does not point to a valid stream.\\n    //  * @param streamId The id of the stream for which to query the balance.\\n    //  * @param who The address for which to query the balance.\\n    //  * @return The total funds allocated to `who` as uint256.\\n    //  */\\n    function balanceOf(uint256 streamId, address who) public override view streamExists(streamId) returns (uint256 balance) {\\n        Types.Stream memory stream = streams[streamId];\\n        BalanceOfLocalVars memory vars;\\n\\n        uint256 delta = deltaOf(streamId);\\n        (vars.mathErr, vars.recipientBalance) = mulUInt(delta, stream.ratePerSecond);\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"recipient balance calculation error\\\");\\n\\n        /*\\n         * If the stream `balance` does not equal `deposit`, it means there have been withdrawals.\\n         * We have to subtract the total amount withdrawn from the amount of money that has been\\n         * streamed until now.\\n         */\\n        if (stream.deposit > stream.remainingBalance) {\\n            (vars.mathErr, vars.withdrawalAmount) = subUInt(stream.deposit, stream.remainingBalance);\\n            assert(vars.mathErr == MathError.NO_ERROR);\\n            (vars.mathErr, vars.recipientBalance) = subUInt(vars.recipientBalance, vars.withdrawalAmount);\\n            /* `withdrawalAmount` cannot and should not be bigger than `recipientBalance`. */\\n            assert(vars.mathErr == MathError.NO_ERROR);\\n        }\\n\\n        if (who == stream.recipient) return vars.recipientBalance;\\n        if (who == stream.sender) {\\n            (vars.mathErr, vars.senderBalance) = subUInt(stream.remainingBalance, vars.recipientBalance);\\n            /* `recipientBalance` cannot and should not be bigger than `remainingBalance`. */\\n            assert(vars.mathErr == MathError.NO_ERROR);\\n            return vars.senderBalance;\\n        }\\n        return 0;\\n    }\\n\\n    /*** Public Effects & Interactions Functions ***/\\n\\n    struct CreateStreamLocalVars {\\n        MathError mathErr;\\n        uint256 duration;\\n        uint256 ratePerSecond;\\n    }\\n\\n    /**\\n     * @notice Creates a new stream funded by `msg.sender` and paid towards `recipient`.\\n     * @dev Throws if the recipient is the zero address, the contract itself or the caller.\\n     *  Throws if the deposit is 0.\\n     *  Throws if the start time is before `block.timestamp`.\\n     *  Throws if the stop time is before the start time.\\n     *  Throws if the duration calculation has a math error.\\n     *  Throws if the deposit is smaller than the duration.\\n     *  Throws if the deposit is not a multiple of the duration.\\n     *  Throws if the rate calculation has a math error.\\n     *  Throws if the next stream id calculation has a math error.\\n     *  Throws if the contract is not allowed to transfer enough tokens.\\n     *  Throws if there is a token transfer failure.\\n     * @param recipient The address towards which the money is streamed.\\n     * @param deposit The amount of money to be streamed.\\n     * @param tokenAddress The ERC20 token to use as streaming currency.\\n     * @param startTime The unix timestamp for when the stream starts.\\n     * @param stopTime The unix timestamp for when the stream stops.\\n     * @return The uint256 id of the newly created stream.\\n     */\\n    function createStream(address recipient, uint256 deposit, address tokenAddress, uint256 startTime, uint256 stopTime)\\n        public override\\n        returns (uint256)\\n    {\\n        require(recipient != address(0x00), \\\"stream to the zero address\\\");\\n        require(recipient != address(this), \\\"stream to the contract itself\\\");\\n        require(recipient != msg.sender, \\\"stream to the caller\\\");\\n        require(deposit > 0, \\\"deposit is zero\\\");\\n        require(startTime >= block.timestamp, \\\"start time before block.timestamp\\\");\\n        require(stopTime > startTime, \\\"stop time before the start time\\\");\\n\\n        CreateStreamLocalVars memory vars;\\n        (vars.mathErr, vars.duration) = subUInt(stopTime, startTime);\\n        /* `subUInt` can only return MathError.INTEGER_UNDERFLOW but we know `stopTime` is higher than `startTime`. */\\n        assert(vars.mathErr == MathError.NO_ERROR);\\n\\n        /* Without this, the rate per second would be zero. */\\n        require(deposit >= vars.duration, \\\"deposit smaller than time delta\\\");\\n\\n        /* This condition avoids dealing with remainders */\\n        require(deposit % vars.duration == 0, \\\"deposit not multiple of time delta\\\");\\n\\n        (vars.mathErr, vars.ratePerSecond) = divUInt(deposit, vars.duration);\\n        /* `divUInt` can only return MathError.DIVISION_BY_ZERO but we know `duration` is not zero. */\\n        assert(vars.mathErr == MathError.NO_ERROR);\\n\\n        /* Create and store the stream object. */\\n        uint256 streamId = nextStreamId;\\n        streams[streamId] = Types.Stream({\\n            remainingBalance: deposit,\\n            deposit: deposit,\\n            isEntity: true,\\n            ratePerSecond: vars.ratePerSecond,\\n            recipient: recipient,\\n            sender: msg.sender,\\n            startTime: startTime,\\n            stopTime: stopTime,\\n            tokenAddress: tokenAddress\\n        });\\n\\n        /* Increment the next stream id. */\\n        (vars.mathErr, nextStreamId) = addUInt(nextStreamId, uint256(1));\\n        require(vars.mathErr == MathError.NO_ERROR, \\\"next stream id calculation error\\\");\\n\\n        IERC20(tokenAddress).safeTransferFrom(msg.sender, address(this), deposit);\\n        emit CreateStream(streamId, msg.sender, recipient, deposit, tokenAddress, startTime, stopTime);\\n        return streamId;\\n    }\\n\\n    /**\\n     * @notice Withdraws from the contract to the recipient's account.\\n     * @dev Throws if the id does not point to a valid stream.\\n     *  Throws if the caller is not the sender or the recipient of the stream.\\n     *  Throws if the amount exceeds the available balance.\\n     *  Throws if there is a token transfer failure.\\n     * @param streamId The id of the stream to withdraw tokens from.\\n     * @param amount The amount of tokens to withdraw.\\n     */\\n    function withdrawFromStream(uint256 streamId, uint256 amount) override\\n        external\\n        nonReentrant\\n        streamExists(streamId)\\n        onlySenderOrRecipient(streamId)\\n        returns (bool)\\n    {\\n        require(amount > 0, \\\"amount is zero\\\");\\n        Types.Stream memory stream = streams[streamId];\\n\\n        uint256 balance = balanceOf(streamId, stream.recipient);\\n        require(balance >= amount, \\\"amount exceeds the available balance\\\");\\n\\n        MathError mathErr;\\n        (mathErr, streams[streamId].remainingBalance) = subUInt(stream.remainingBalance, amount);\\n        /**\\n         * `subUInt` can only return MathError.INTEGER_UNDERFLOW but we know that `remainingBalance` is at least\\n         * as big as `amount`.\\n         */\\n        assert(mathErr == MathError.NO_ERROR);\\n\\n        if (streams[streamId].remainingBalance == 0) delete streams[streamId];\\n\\n        IERC20(stream.tokenAddress).safeTransfer(stream.recipient, amount);\\n        emit WithdrawFromStream(streamId, stream.recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Cancels the stream and transfers the tokens back on a pro rata basis.\\n     * @dev Throws if the id does not point to a valid stream.\\n     *  Throws if the caller is not the sender or the recipient of the stream.\\n     *  Throws if there is a token transfer failure.\\n     * @param streamId The id of the stream to cancel.\\n     * @return bool true=success, otherwise false.\\n     */\\n    function cancelStream(uint256 streamId) override\\n        external\\n        nonReentrant\\n        streamExists(streamId)\\n        onlySenderOrRecipient(streamId)\\n        returns (bool)\\n    {\\n        Types.Stream memory stream = streams[streamId];\\n        uint256 senderBalance = balanceOf(streamId, stream.sender);\\n        uint256 recipientBalance = balanceOf(streamId, stream.recipient);\\n\\n        delete streams[streamId];\\n\\n        IERC20 token = IERC20(stream.tokenAddress);\\n        if (recipientBalance > 0) token.safeTransfer(stream.recipient, recipientBalance);\\n        if (senderBalance > 0) token.safeTransfer(stream.sender, senderBalance);\\n\\n        emit CancelStream(streamId, stream.sender, stream.recipient, senderBalance, recipientBalance);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x9a0594ff1137365c5b42816e3348f19b50d5071f00b7b804db1cdc68023fb3e7\",\"license\":\"MIT\"},\"contracts/Sablier/Types.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.17;\\n\\n/**\\n * @title Sablier Types\\n * @author Sablier\\n */\\nlibrary Types {\\n    struct Stream {\\n        uint256 deposit;\\n        uint256 ratePerSecond;\\n        uint256 remainingBalance;\\n        uint256 startTime;\\n        uint256 stopTime;\\n        address recipient;\\n        address sender;\\n        address tokenAddress;\\n        bool isEntity;\\n    }\\n}\\n\",\"keccak256\":\"0x6a3644e283d74e821b11488e7ee0ba38e48e94679bf139599ee8bb9db7574408\",\"license\":\"MIT\"},\"contracts/Sablier/interfaces/ISablier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.17;\\n\\n/**\\n * @title ISablier\\n * @author Sablier\\n */\\ninterface ISablier {\\n    /**\\n     * @notice Emits when a stream is successfully created.\\n     */\\n    event CreateStream(\\n        uint256 indexed streamId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 deposit,\\n        address tokenAddress,\\n        uint256 startTime,\\n        uint256 stopTime\\n    );\\n\\n    /**\\n     * @notice Emits when the recipient of a stream withdraws a portion or all their pro rata share of the stream.\\n     */\\n    event WithdrawFromStream(uint256 indexed streamId, address indexed recipient, uint256 amount);\\n\\n    /**\\n     * @notice Emits when a stream is successfully cancelled and tokens are transferred back on a pro rata basis.\\n     */\\n    event CancelStream(\\n        uint256 indexed streamId,\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 senderBalance,\\n        uint256 recipientBalance\\n    );\\n\\n    function balanceOf(uint256 streamId, address who) external view returns (uint256 balance);\\n\\n    function getStream(uint256 streamId)\\n        external\\n        view\\n        returns (\\n            address sender,\\n            address recipient,\\n            uint256 deposit,\\n            address token,\\n            uint256 startTime,\\n            uint256 stopTime,\\n            uint256 remainingBalance,\\n            uint256 ratePerSecond\\n        );\\n\\n    function createStream(address recipient, uint256 deposit, address tokenAddress, uint256 startTime, uint256 stopTime)\\n        external\\n        returns (uint256 streamId);\\n\\n    function withdrawFromStream(uint256 streamId, uint256 funds) external returns (bool);\\n\\n    function cancelStream(uint256 streamId) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa34e78c979d14f82ee72250d073c7888a88d9da85f9a1e3da5cb3c4ff097bcc5\",\"license\":\"MIT\"},\"contracts/Sablier/shared-contracts/compound/CarefulMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.17;\\n\\n/**\\n  * @title Careful Math\\n  * @author Compound\\n  * @notice Derived from OpenZeppelin's SafeMath library\\n  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\\n  */\\ncontract CarefulMath {\\n\\n    /**\\n     * @dev Possible error codes that we can return\\n     */\\n    enum MathError {\\n        NO_ERROR,\\n        DIVISION_BY_ZERO,\\n        INTEGER_OVERFLOW,\\n        INTEGER_UNDERFLOW\\n    }\\n\\n    /**\\n    * @dev Multiplies two numbers, returns an error on overflow.\\n    */\\n    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (a == 0) {\\n            return (MathError.NO_ERROR, 0);\\n        }\\n\\n        uint c = a * b;\\n\\n        if (c / a != b) {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        } else {\\n            return (MathError.NO_ERROR, c);\\n        }\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers, truncating the quotient.\\n    */\\n    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b == 0) {\\n            return (MathError.DIVISION_BY_ZERO, 0);\\n        }\\n\\n        return (MathError.NO_ERROR, a / b);\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        if (b <= a) {\\n            return (MathError.NO_ERROR, a - b);\\n        } else {\\n            return (MathError.INTEGER_UNDERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, returns an error on overflow.\\n    */\\n    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\\n        uint c = a + b;\\n\\n        if (c >= a) {\\n            return (MathError.NO_ERROR, c);\\n        } else {\\n            return (MathError.INTEGER_OVERFLOW, 0);\\n        }\\n    }\\n\\n    /**\\n    * @dev add a and b and then subtract c\\n    */\\n    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\\n        (MathError err0, uint sum) = addUInt(a, b);\\n\\n        if (err0 != MathError.NO_ERROR) {\\n            return (err0, 0);\\n        }\\n\\n        return subUInt(sum, c);\\n    }\\n}\\n\",\"keccak256\":\"0xee1dd2da0c5e06dde1473c8ce78d465a6cf526b492eb59ba238d9a62e7f57699\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016000819055620186a090556119598061002d6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80637a9b2c6c1161005b5780637a9b2c6c146100f9578063894e9a0d1461011c578063a82ccd4d1461019b578063cc1b4bf6146101b85761007d565b80631e99d569146100825780633656eec21461009c5780636db9241b146100c8575b600080fd5b61008a6101f8565b60408051918252519081900360200190f35b61008a600480360360408110156100b257600080fd5b50803590602001356001600160a01b03166101fe565b6100e5600480360360208110156100de57600080fd5b50356104e3565b604080519115158252519081900360200190f35b6100e56004803603604081101561010f57600080fd5b50803590602001356107f1565b6101396004803603602081101561013257600080fd5b5035610b8f565b60405180896001600160a01b03168152602001886001600160a01b03168152602001878152602001866001600160a01b031681526020018581526020018481526020018381526020018281526020019850505050505050505060405180910390f35b61008a600480360360208110156101b157600080fd5b5035610c63565b61008a600480360360a08110156101ce57600080fd5b506001600160a01b0381358116916020810135916040820135169060608101359060800135610d9f565b60015481565b6000828152600260205260408120600701548390600160a01b900460ff16610265576040805162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b604482015290519081900360640190fd5b61026d61175e565b50600084815260026020818152604092839020835161012081018552815481526001820154928101929092529182015492810192909252600381015460608301526004810154608083015260058101546001600160a01b0390811660a08401526006820154811660c084015260079091015490811660e0830152600160a01b900460ff1615156101008201526103016117c7565b600061030c87610c63565b905061031c818460200151611321565b602084018190528382600381111561033057fe5b600381111561033b57fe5b905250600090508251600381111561034f57fe5b1461038b5760405162461bcd60e51b81526004018080602001828103825260238152602001806118a06023913960400191505060405180910390fd5b604083015183511115610430576103aa83600001518460400151611363565b60408401819052838260038111156103be57fe5b60038111156103c957fe5b90525060009050825160038111156103dd57fe5b146103e457fe5b6103f682602001518360400151611363565b602084018190528382600381111561040a57fe5b600381111561041557fe5b905250600090508251600381111561042957fe5b1461043057fe5b8260a001516001600160a01b0316866001600160a01b0316141561045c57506020015192506104dc9050565b8260c001516001600160a01b0316866001600160a01b031614156104d45761048c83604001518360200151611363565b60608401819052838260038111156104a057fe5b60038111156104ab57fe5b90525060009050825160038111156104bf57fe5b146104c657fe5b506060015192506104dc9050565b600094505050505b5092915050565b60006002600054141561053d576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600081815583815260209190915260409020600701548290600160a01b900460ff166105aa576040805162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b604482015290519081900360640190fd5b60008381526002602052604090206006015483906001600160a01b03163314806105ed57506000818152600260205260409020600501546001600160a01b031633145b6106285760405162461bcd60e51b81526004018080602001828103825260378152602001806118c36037913960400191505060405180910390fd5b61063061175e565b506000848152600260208181526040808420815161012081018352815481526001820154938101939093529283015490820152600382015460608201526004820154608082015260058201546001600160a01b0390811660a08301526006830154811660c0830181905260079093015490811660e0830152600160a01b900460ff16151561010082015291906106c79087906101fe565b905060006106d9878460a001516101fe565b60008881526002602081905260408220828155600181018390559081018290556003810182905560048101919091556005810180546001600160a01b0319908116909155600682018054909116905560070180546001600160a81b031916905560e084015190915081156107615760a0840151610761906001600160a01b0383169084611386565b82156107815760c0840151610781906001600160a01b0383169085611386565b8360a001516001600160a01b03168460c001516001600160a01b0316897fca3e6079b726e7728802a0537949e2d1c7762304fa641fb06eb56daf2ba8c6b98686604051808381526020018281526020019250505060405180910390a4600196505050505050506001600055919050565b60006002600054141561084b576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600081815584815260209190915260409020600701548390600160a01b900460ff166108b8576040805162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b604482015290519081900360640190fd5b60008481526002602052604090206006015484906001600160a01b03163314806108fb57506000818152600260205260409020600501546001600160a01b031633145b6109365760405162461bcd60e51b81526004018080602001828103825260378152602001806118c36037913960400191505060405180910390fd5b6000841161097c576040805162461bcd60e51b815260206004820152600e60248201526d616d6f756e74206973207a65726f60901b604482015290519081900360640190fd5b61098461175e565b506000858152600260208181526040808420815161012081018352815481526001820154938101939093529283015490820152600382015460608201526004820154608082015260058201546001600160a01b0390811660a083018190526006840154821660c084015260079093015490811660e0830152600160a01b900460ff1615156101008201529190610a1b9088906101fe565b905085811015610a5c5760405162461bcd60e51b81526004018080602001828103825260248152602001806118136024913960400191505060405180910390fd5b6000610a6c836040015188611363565b60008a815260026020819052604082200191909155909150816003811115610a9057fe5b14610a9757fe5b60008881526002602081905260409091200154610b0f5760008881526002602081905260408220828155600181018390559081018290556003810182905560048101919091556005810180546001600160a01b0319908116909155600682018054909116905560070180546001600160a81b03191690555b610b358360a00151888560e001516001600160a01b03166113869092919063ffffffff16565b8260a001516001600160a01b0316887f36c3ab437e6a424ed25dc4bfdeb62706aa06558660fab2dab229d2555adaf89c896040518082815260200191505060405180910390a3600195505050505050600160005592915050565b600080600080600080600080886002600082815260200190815260200160002060070160149054906101000a900460ff16610c09576040805162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b604482015290519081900360640190fd5b505050600096875250506002602081905260409095206006810154600582015482546007840154600385015460048601549a8601546001909601546001600160a01b039586169c9486169b939a5094909116975095509350565b6000818152600260205260408120600701548290600160a01b900460ff16610cca576040805162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b604482015290519081900360640190fd5b610cd261175e565b506000838152600260208181526040928390208351610120810185528154815260018201549281019290925291820154928101929092526003810154606083018190526004820154608084015260058201546001600160a01b0390811660a08501526006830154811660c085015260079092015491821660e0840152600160a01b90910460ff1615156101008301524211610d71576000925050610d99565b8060800151421015610d8a576060015142039150610d99565b80606001518160800151039250505b50919050565b60006001600160a01b038616610dfc576040805162461bcd60e51b815260206004820152601a60248201527f73747265616d20746f20746865207a65726f2061646472657373000000000000604482015290519081900360640190fd5b6001600160a01b038616301415610e5a576040805162461bcd60e51b815260206004820152601d60248201527f73747265616d20746f2074686520636f6e747261637420697473656c66000000604482015290519081900360640190fd5b6001600160a01b038616331415610eaf576040805162461bcd60e51b815260206004820152601460248201527339ba3932b0b6903a37903a34329031b0b63632b960611b604482015290519081900360640190fd5b60008511610ef6576040805162461bcd60e51b815260206004820152600f60248201526e6465706f736974206973207a65726f60881b604482015290519081900360640190fd5b42831015610f355760405162461bcd60e51b815260040180806020018281038252602181526020018061185d6021913960400191505060405180910390fd5b828211610f89576040805162461bcd60e51b815260206004820152601f60248201527f73746f702074696d65206265666f7265207468652073746172742074696d6500604482015290519081900360640190fd5b610f916117f0565b610f9b8385611363565b6020830181905282826003811115610faf57fe5b6003811115610fba57fe5b9052506000905081516003811115610fce57fe5b14610fd557fe5b806020015186101561102e576040805162461bcd60e51b815260206004820152601f60248201527f6465706f73697420736d616c6c6572207468616e2074696d652064656c746100604482015290519081900360640190fd5b8060200151868161103b57fe5b06156110785760405162461bcd60e51b815260040180806020018281038252602281526020018061187e6022913960400191505060405180910390fd5b6110868682602001516113dd565b604083018190528282600381111561109a57fe5b60038111156110a557fe5b90525060009050815160038111156110b957fe5b146110c057fe5b6000600154905060405180610120016040528088815260200183604001518152602001888152602001868152602001858152602001896001600160a01b03168152602001336001600160a01b03168152602001876001600160a01b031681526020016001151581525060026000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160060160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e08201518160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101008201518160070160146101000a81548160ff0219169083151502179055509050506112266001546001611408565b60018190558382600381111561123857fe5b600381111561124357fe5b905250600090508251600381111561125757fe5b146112a9576040805162461bcd60e51b815260206004820181905260248201527f6e6578742073747265616d2069642063616c63756c6174696f6e206572726f72604482015290519081900360640190fd5b6112be6001600160a01b03871633308a61142e565b604080518881526001600160a01b038881166020830152818301889052606082018790529151918a1691339184917f7b01d409597969366dc268d7f957a990d1ca3d3449baf8fb45db67351aecfe789181900360800190a4979650505050505050565b600080836113345750600090508061135c565b8383028385828161134157fe5b04146113555760026000925092505061135c565b6000925090505b9250929050565b60008083831161137a57506000905081830361135c565b5060039050600061135c565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526113d890849061148e565b505050565b600080826113f1575060019050600061135c565b60008385816113fc57fe5b04915091509250929050565b6000808383018481106114205760009250905061135c565b60026000925092505061135c565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261148890859061148e565b50505050565b60606114e3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661153f9092919063ffffffff16565b8051909150156113d85780806020019051602081101561150257600080fd5b50516113d85760405162461bcd60e51b815260040180806020018281038252602a8152602001806118fa602a913960400191505060405180910390fd5b606061154e8484600085611558565b90505b9392505050565b6060824710156115995760405162461bcd60e51b81526004018080602001828103825260268152602001806118376026913960400191505060405180910390fd5b6115a2856116b4565b6115f3576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106116325780518252601f199092019160209182019101611613565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611694576040519150601f19603f3d011682016040523d82523d6000602084013e611699565b606091505b50915091506116a98282866116ba565b979650505050505050565b3b151590565b606083156116c9575081611551565b8251156116d95782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561172357818101518382015260200161170b565b50505050905090810190601f1680156117505780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b604051806101200160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000151581525090565b604080516080810190915280600081526020016000815260200160008152602001600081525090565b604080516060810190915280600081526020016000815260200160008152509056fe616d6f756e7420657863656564732074686520617661696c61626c652062616c616e6365416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c73746172742074696d65206265666f726520626c6f636b2e74696d657374616d706465706f736974206e6f74206d756c7469706c65206f662074696d652064656c7461726563697069656e742062616c616e63652063616c63756c6174696f6e206572726f7263616c6c6572206973206e6f74207468652073656e646572206f722074686520726563697069656e74206f66207468652073747265616d5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212201343cdf1d2ba4c12d191fff60c6bea5ddf55e8bab4d795726e820a63741f316964736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80637a9b2c6c1161005b5780637a9b2c6c146100f9578063894e9a0d1461011c578063a82ccd4d1461019b578063cc1b4bf6146101b85761007d565b80631e99d569146100825780633656eec21461009c5780636db9241b146100c8575b600080fd5b61008a6101f8565b60408051918252519081900360200190f35b61008a600480360360408110156100b257600080fd5b50803590602001356001600160a01b03166101fe565b6100e5600480360360208110156100de57600080fd5b50356104e3565b604080519115158252519081900360200190f35b6100e56004803603604081101561010f57600080fd5b50803590602001356107f1565b6101396004803603602081101561013257600080fd5b5035610b8f565b60405180896001600160a01b03168152602001886001600160a01b03168152602001878152602001866001600160a01b031681526020018581526020018481526020018381526020018281526020019850505050505050505060405180910390f35b61008a600480360360208110156101b157600080fd5b5035610c63565b61008a600480360360a08110156101ce57600080fd5b506001600160a01b0381358116916020810135916040820135169060608101359060800135610d9f565b60015481565b6000828152600260205260408120600701548390600160a01b900460ff16610265576040805162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b604482015290519081900360640190fd5b61026d61175e565b50600084815260026020818152604092839020835161012081018552815481526001820154928101929092529182015492810192909252600381015460608301526004810154608083015260058101546001600160a01b0390811660a08401526006820154811660c084015260079091015490811660e0830152600160a01b900460ff1615156101008201526103016117c7565b600061030c87610c63565b905061031c818460200151611321565b602084018190528382600381111561033057fe5b600381111561033b57fe5b905250600090508251600381111561034f57fe5b1461038b5760405162461bcd60e51b81526004018080602001828103825260238152602001806118a06023913960400191505060405180910390fd5b604083015183511115610430576103aa83600001518460400151611363565b60408401819052838260038111156103be57fe5b60038111156103c957fe5b90525060009050825160038111156103dd57fe5b146103e457fe5b6103f682602001518360400151611363565b602084018190528382600381111561040a57fe5b600381111561041557fe5b905250600090508251600381111561042957fe5b1461043057fe5b8260a001516001600160a01b0316866001600160a01b0316141561045c57506020015192506104dc9050565b8260c001516001600160a01b0316866001600160a01b031614156104d45761048c83604001518360200151611363565b60608401819052838260038111156104a057fe5b60038111156104ab57fe5b90525060009050825160038111156104bf57fe5b146104c657fe5b506060015192506104dc9050565b600094505050505b5092915050565b60006002600054141561053d576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600081815583815260209190915260409020600701548290600160a01b900460ff166105aa576040805162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b604482015290519081900360640190fd5b60008381526002602052604090206006015483906001600160a01b03163314806105ed57506000818152600260205260409020600501546001600160a01b031633145b6106285760405162461bcd60e51b81526004018080602001828103825260378152602001806118c36037913960400191505060405180910390fd5b61063061175e565b506000848152600260208181526040808420815161012081018352815481526001820154938101939093529283015490820152600382015460608201526004820154608082015260058201546001600160a01b0390811660a08301526006830154811660c0830181905260079093015490811660e0830152600160a01b900460ff16151561010082015291906106c79087906101fe565b905060006106d9878460a001516101fe565b60008881526002602081905260408220828155600181018390559081018290556003810182905560048101919091556005810180546001600160a01b0319908116909155600682018054909116905560070180546001600160a81b031916905560e084015190915081156107615760a0840151610761906001600160a01b0383169084611386565b82156107815760c0840151610781906001600160a01b0383169085611386565b8360a001516001600160a01b03168460c001516001600160a01b0316897fca3e6079b726e7728802a0537949e2d1c7762304fa641fb06eb56daf2ba8c6b98686604051808381526020018281526020019250505060405180910390a4600196505050505050506001600055919050565b60006002600054141561084b576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600081815584815260209190915260409020600701548390600160a01b900460ff166108b8576040805162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b604482015290519081900360640190fd5b60008481526002602052604090206006015484906001600160a01b03163314806108fb57506000818152600260205260409020600501546001600160a01b031633145b6109365760405162461bcd60e51b81526004018080602001828103825260378152602001806118c36037913960400191505060405180910390fd5b6000841161097c576040805162461bcd60e51b815260206004820152600e60248201526d616d6f756e74206973207a65726f60901b604482015290519081900360640190fd5b61098461175e565b506000858152600260208181526040808420815161012081018352815481526001820154938101939093529283015490820152600382015460608201526004820154608082015260058201546001600160a01b0390811660a083018190526006840154821660c084015260079093015490811660e0830152600160a01b900460ff1615156101008201529190610a1b9088906101fe565b905085811015610a5c5760405162461bcd60e51b81526004018080602001828103825260248152602001806118136024913960400191505060405180910390fd5b6000610a6c836040015188611363565b60008a815260026020819052604082200191909155909150816003811115610a9057fe5b14610a9757fe5b60008881526002602081905260409091200154610b0f5760008881526002602081905260408220828155600181018390559081018290556003810182905560048101919091556005810180546001600160a01b0319908116909155600682018054909116905560070180546001600160a81b03191690555b610b358360a00151888560e001516001600160a01b03166113869092919063ffffffff16565b8260a001516001600160a01b0316887f36c3ab437e6a424ed25dc4bfdeb62706aa06558660fab2dab229d2555adaf89c896040518082815260200191505060405180910390a3600195505050505050600160005592915050565b600080600080600080600080886002600082815260200190815260200160002060070160149054906101000a900460ff16610c09576040805162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b604482015290519081900360640190fd5b505050600096875250506002602081905260409095206006810154600582015482546007840154600385015460048601549a8601546001909601546001600160a01b039586169c9486169b939a5094909116975095509350565b6000818152600260205260408120600701548290600160a01b900460ff16610cca576040805162461bcd60e51b81526020600482015260156024820152741cdd1c99585b48191bd95cc81b9bdd08195e1a5cdd605a1b604482015290519081900360640190fd5b610cd261175e565b506000838152600260208181526040928390208351610120810185528154815260018201549281019290925291820154928101929092526003810154606083018190526004820154608084015260058201546001600160a01b0390811660a08501526006830154811660c085015260079092015491821660e0840152600160a01b90910460ff1615156101008301524211610d71576000925050610d99565b8060800151421015610d8a576060015142039150610d99565b80606001518160800151039250505b50919050565b60006001600160a01b038616610dfc576040805162461bcd60e51b815260206004820152601a60248201527f73747265616d20746f20746865207a65726f2061646472657373000000000000604482015290519081900360640190fd5b6001600160a01b038616301415610e5a576040805162461bcd60e51b815260206004820152601d60248201527f73747265616d20746f2074686520636f6e747261637420697473656c66000000604482015290519081900360640190fd5b6001600160a01b038616331415610eaf576040805162461bcd60e51b815260206004820152601460248201527339ba3932b0b6903a37903a34329031b0b63632b960611b604482015290519081900360640190fd5b60008511610ef6576040805162461bcd60e51b815260206004820152600f60248201526e6465706f736974206973207a65726f60881b604482015290519081900360640190fd5b42831015610f355760405162461bcd60e51b815260040180806020018281038252602181526020018061185d6021913960400191505060405180910390fd5b828211610f89576040805162461bcd60e51b815260206004820152601f60248201527f73746f702074696d65206265666f7265207468652073746172742074696d6500604482015290519081900360640190fd5b610f916117f0565b610f9b8385611363565b6020830181905282826003811115610faf57fe5b6003811115610fba57fe5b9052506000905081516003811115610fce57fe5b14610fd557fe5b806020015186101561102e576040805162461bcd60e51b815260206004820152601f60248201527f6465706f73697420736d616c6c6572207468616e2074696d652064656c746100604482015290519081900360640190fd5b8060200151868161103b57fe5b06156110785760405162461bcd60e51b815260040180806020018281038252602281526020018061187e6022913960400191505060405180910390fd5b6110868682602001516113dd565b604083018190528282600381111561109a57fe5b60038111156110a557fe5b90525060009050815160038111156110b957fe5b146110c057fe5b6000600154905060405180610120016040528088815260200183604001518152602001888152602001868152602001858152602001896001600160a01b03168152602001336001600160a01b03168152602001876001600160a01b031681526020016001151581525060026000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060c08201518160060160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e08201518160070160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506101008201518160070160146101000a81548160ff0219169083151502179055509050506112266001546001611408565b60018190558382600381111561123857fe5b600381111561124357fe5b905250600090508251600381111561125757fe5b146112a9576040805162461bcd60e51b815260206004820181905260248201527f6e6578742073747265616d2069642063616c63756c6174696f6e206572726f72604482015290519081900360640190fd5b6112be6001600160a01b03871633308a61142e565b604080518881526001600160a01b038881166020830152818301889052606082018790529151918a1691339184917f7b01d409597969366dc268d7f957a990d1ca3d3449baf8fb45db67351aecfe789181900360800190a4979650505050505050565b600080836113345750600090508061135c565b8383028385828161134157fe5b04146113555760026000925092505061135c565b6000925090505b9250929050565b60008083831161137a57506000905081830361135c565b5060039050600061135c565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526113d890849061148e565b505050565b600080826113f1575060019050600061135c565b60008385816113fc57fe5b04915091509250929050565b6000808383018481106114205760009250905061135c565b60026000925092505061135c565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261148890859061148e565b50505050565b60606114e3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661153f9092919063ffffffff16565b8051909150156113d85780806020019051602081101561150257600080fd5b50516113d85760405162461bcd60e51b815260040180806020018281038252602a8152602001806118fa602a913960400191505060405180910390fd5b606061154e8484600085611558565b90505b9392505050565b6060824710156115995760405162461bcd60e51b81526004018080602001828103825260268152602001806118376026913960400191505060405180910390fd5b6115a2856116b4565b6115f3576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106116325780518252601f199092019160209182019101611613565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611694576040519150601f19603f3d011682016040523d82523d6000602084013e611699565b606091505b50915091506116a98282866116ba565b979650505050505050565b3b151590565b606083156116c9575081611551565b8251156116d95782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561172357818101518382015260200161170b565b50505050905090810190601f1680156117505780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b604051806101200160405280600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000151581525090565b604080516080810190915280600081526020016000815260200160008152602001600081525090565b604080516060810190915280600081526020016000815260200160008152509056fe616d6f756e7420657863656564732074686520617661696c61626c652062616c616e6365416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c73746172742074696d65206265666f726520626c6f636b2e74696d657374616d706465706f736974206e6f74206d756c7469706c65206f662074696d652064656c7461726563697069656e742062616c616e63652063616c63756c6174696f6e206572726f7263616c6c6572206973206e6f74207468652073656e646572206f722074686520726563697069656e74206f66207468652073747265616d5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a26469706673582212201343cdf1d2ba4c12d191fff60c6bea5ddf55e8bab4d795726e820a63741f316964736f6c634300060c0033",
  "devdoc": {
    "author": "Sablier",
    "kind": "dev",
    "methods": {
      "cancelStream(uint256)": {
        "details": "Throws if the id does not point to a valid stream.  Throws if the caller is not the sender or the recipient of the stream.  Throws if there is a token transfer failure.",
        "params": {
          "streamId": "The id of the stream to cancel."
        },
        "returns": {
          "_0": "bool true=success, otherwise false."
        }
      },
      "createStream(address,uint256,address,uint256,uint256)": {
        "details": "Throws if the recipient is the zero address, the contract itself or the caller.  Throws if the deposit is 0.  Throws if the start time is before `block.timestamp`.  Throws if the stop time is before the start time.  Throws if the duration calculation has a math error.  Throws if the deposit is smaller than the duration.  Throws if the deposit is not a multiple of the duration.  Throws if the rate calculation has a math error.  Throws if the next stream id calculation has a math error.  Throws if the contract is not allowed to transfer enough tokens.  Throws if there is a token transfer failure.",
        "params": {
          "deposit": "The amount of money to be streamed.",
          "recipient": "The address towards which the money is streamed.",
          "startTime": "The unix timestamp for when the stream starts.",
          "stopTime": "The unix timestamp for when the stream stops.",
          "tokenAddress": "The ERC20 token to use as streaming currency."
        },
        "returns": {
          "_0": "The uint256 id of the newly created stream."
        }
      },
      "withdrawFromStream(uint256,uint256)": {
        "details": "Throws if the id does not point to a valid stream.  Throws if the caller is not the sender or the recipient of the stream.  Throws if the amount exceeds the available balance.  Throws if there is a token transfer failure.",
        "params": {
          "amount": "The amount of tokens to withdraw.",
          "streamId": "The id of the stream to withdraw tokens from."
        }
      }
    },
    "title": "Sablier",
    "version": 1
  },
  "userdoc": {
    "events": {
      "CancelStream(uint256,address,address,uint256,uint256)": {
        "notice": "Emits when a stream is successfully cancelled and tokens are transferred back on a pro rata basis."
      },
      "CreateStream(uint256,address,address,uint256,address,uint256,uint256)": {
        "notice": "Emits when a stream is successfully created."
      },
      "WithdrawFromStream(uint256,address,uint256)": {
        "notice": "Emits when the recipient of a stream withdraws a portion or all their pro rata share of the stream."
      }
    },
    "kind": "user",
    "methods": {
      "cancelStream(uint256)": {
        "notice": "Cancels the stream and transfers the tokens back on a pro rata basis."
      },
      "createStream(address,uint256,address,uint256,uint256)": {
        "notice": "Creates a new stream funded by `msg.sender` and paid towards `recipient`."
      },
      "nextStreamId()": {
        "notice": "Counter for new stream ids."
      },
      "withdrawFromStream(uint256,uint256)": {
        "notice": "Withdraws from the contract to the recipient's account."
      }
    },
    "notice": "Money streaming.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1588,
        "contract": "contracts/Sablier/Sablier.sol:Sablier",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2250,
        "contract": "contracts/Sablier/Sablier.sol:Sablier",
        "label": "nextStreamId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2254,
        "contract": "contracts/Sablier/Sablier.sol:Sablier",
        "label": "streams",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Stream)3010_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Stream)3010_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Types.Stream)",
        "numberOfBytes": "32",
        "value": "t_struct(Stream)3010_storage"
      },
      "t_struct(Stream)3010_storage": {
        "encoding": "inplace",
        "label": "struct Types.Stream",
        "members": [
          {
            "astId": 2993,
            "contract": "contracts/Sablier/Sablier.sol:Sablier",
            "label": "deposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2995,
            "contract": "contracts/Sablier/Sablier.sol:Sablier",
            "label": "ratePerSecond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2997,
            "contract": "contracts/Sablier/Sablier.sol:Sablier",
            "label": "remainingBalance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2999,
            "contract": "contracts/Sablier/Sablier.sol:Sablier",
            "label": "startTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3001,
            "contract": "contracts/Sablier/Sablier.sol:Sablier",
            "label": "stopTime",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 3003,
            "contract": "contracts/Sablier/Sablier.sol:Sablier",
            "label": "recipient",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 3005,
            "contract": "contracts/Sablier/Sablier.sol:Sablier",
            "label": "sender",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 3007,
            "contract": "contracts/Sablier/Sablier.sol:Sablier",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 3009,
            "contract": "contracts/Sablier/Sablier.sol:Sablier",
            "label": "isEntity",
            "offset": 20,
            "slot": "7",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}